#Использовать "helpers"

Перем Поделка; // Поделка
Перем ПотокВывода; // ПотокВПамяти
Перем ТекущийКаталог; // Строка

&Инициализация
Процедура Инициализация() Экспорт
	ТекущийКаталог = ТекущийКаталог();
КонецПроцедуры

&Перед
Процедура ПередКаждым() Экспорт
	ПотокВывода = ПомощникТестирования.ПерехватитьПотокВывода();
КонецПроцедуры

&После
Процедура ПослеКаждого() Экспорт
	ПомощникТестирования.ВернутьПотокВывода();
	ПомощникТестирования.УдалитьВременныеФайлы();
	УстановитьТекущийКаталог(ТекущийКаталог);
КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОбновлениеМанифеста() Экспорт

	// Подготовка
	ОжидаемыйВывод =
	"✓ annotations       1.3.0 → 1.3.1
	|✓ autumn            3.2.0 → 4.3.11
	|✓ packageinfo       0.7   → 0.8
	|✓ 1testrunner  dev  1.8.0 → 1.9.2";

	ФайлМанифеста = ПомощникТестирования.СоздатьВременнуюКопиюФайла(ПомощникТестирования.ФайлМанифеста);

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");
	ПараметрыКоманды.Добавить("--packagedef");
	ПараметрыКоманды.Добавить(ФайлМанифеста);

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	// Проверка
	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);
	ПомощникТестирования.ОжидаемЧтоФайлыИдентичны(ФайлМанифеста, ПомощникТестирования.ФайлОбновленногоМанифеста);

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОбновлениеМанифестаНаПоследниеВерсии() Экспорт

	// Подготовка
	ОжидаемыйВывод =
	"✓ annotations       1.3.0 → 1.3.1
	|✓ autumn            3.2.0 → 4.3.11
	|✓ packageinfo       0.7   → 0.8
	|✓ 1testrunner  dev  1.8.0 → 1.9.2";

	ФайлМанифеста = ПомощникТестирования.СоздатьВременнуюКопиюФайла(ПомощникТестирования.ФайлМанифеста);

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");
	ПараметрыКоманды.Добавить("-t");
	ПараметрыКоманды.Добавить("latest");
	ПараметрыКоманды.Добавить("--packagedef");
	ПараметрыКоманды.Добавить(ФайлМанифеста);

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	// Проверка
	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);
	ПомощникТестирования.ОжидаемЧтоФайлыИдентичны(ФайлМанифеста, ПомощникТестирования.ФайлОбновленногоМанифеста);

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОбновлениеМанифестаНаМинорныеВерсии() Экспорт

	// Подготовка
	ОжидаемыйВывод =
	"✓ annotations       1.3.0 → 1.3.1
	|✓ autumn            3.2.0 → 3.3.0
	|✓ packageinfo       0.7   → 0.8
	|✓ 1testrunner  dev  1.8.0 → 1.9.2";

	ФайлМанифеста = ПомощникТестирования.СоздатьВременнуюКопиюФайла(ПомощникТестирования.ФайлМанифеста);

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");
	ПараметрыКоманды.Добавить("-t");
	ПараметрыКоманды.Добавить("minor");
	ПараметрыКоманды.Добавить("--packagedef");
	ПараметрыКоманды.Добавить(ФайлМанифеста);

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	// Проверка
	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);
	ПомощникТестирования.ОжидаемЧтоФайлыИдентичны(ФайлМанифеста, "./tests/fixtures/packagedef-verified-minor");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОбновлениеМанифестаНаПатчВерсии() Экспорт

	// Подготовка
	ОжидаемыйВывод = "✓ annotations       1.3.0 → 1.3.1";

	ФайлМанифеста = ПомощникТестирования.СоздатьВременнуюКопиюФайла(ПомощникТестирования.ФайлМанифеста);

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");
	ПараметрыКоманды.Добавить("-t");
	ПараметрыКоманды.Добавить("patch");
	ПараметрыКоманды.Добавить("--packagedef");
	ПараметрыКоманды.Добавить(ФайлМанифеста);

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	// Проверка
	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);
	ПомощникТестирования.ОжидаемЧтоФайлыИдентичны(ФайлМанифеста, "./tests/fixtures/packagedef-verified-patch");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьОбновлениеМанифестаПоФильтру() Экспорт

	// Подготовка
	ОжидаемыйВывод = 
	"✓ annotations       1.3.0 → 1.3.1
	|✓ autumn            3.2.0 → 4.3.11";

	ФайлМанифеста = ПомощникТестирования.СоздатьВременнуюКопиюФайла(ПомощникТестирования.ФайлМанифеста);

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");
	ПараметрыКоманды.Добавить("-f");
	ПараметрыКоманды.Добавить("a*");
	ПараметрыКоманды.Добавить("--packagedef");
	ПараметрыКоманды.Добавить(ФайлМанифеста);

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	// Проверка
	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);
	ПомощникТестирования.ОжидаемЧтоФайлыИдентичны(ФайлМанифеста, "./tests/fixtures/packagedef-verified-latest-filtered");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьФормированиеРезервнойКопии() Экспорт

	// Подготовка
	ОжидаемыйВывод =
	"✓ annotations       1.3.0 → 1.3.1
	|✓ autumn            3.2.0 → 4.3.11
	|✓ packageinfo       0.7   → 0.8
	|✓ 1testrunner  dev  1.8.0 → 1.9.2
	|
	|Создана резервная копия файла манифеста:";

	ФайлМанифеста = ПомощникТестирования.СоздатьВременнуюКопиюФайла(ПомощникТестирования.ФайлМанифеста);

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");
	ПараметрыКоманды.Добавить("--backup");
	ПараметрыКоманды.Добавить("--packagedef");
	ПараметрыКоманды.Добавить(ФайлМанифеста);

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	// Проверка

	// Проверяем вывод
	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);

	// Проверяем содержимое резервной копии
	ФайлРезервнойКопии = ИзвлечьПутьКФайлуРезервнойКопииИзТекста(ТекстВывода);
	ПомощникТестирования.ОжидаемЧтоФайлыИдентичны(ФайлРезервнойКопии, ПомощникТестирования.ФайлМанифеста);

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьВыводТекстаНеНайденыЗависимости() Экспорт

	// Подготовка
	ОжидаемыйВывод = "Не найдены зависимости для обновления";

	ФайлМанифеста = ПомощникТестирования.СоздатьВременнуюКопиюФайла(ПомощникТестирования.ФайлМанифеста);

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");
	ПараметрыКоманды.Добавить("--packagedef");
	ПараметрыКоманды.Добавить("./tests/fixtures/packagedef-no-deps");

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	// Проверка
	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);
	ПомощникТестирования.ОжидаемЧтоФайлыИдентичны(ФайлМанифеста, ПомощникТестирования.ФайлМанифеста);

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьВыводОшибкиНеНайденФайлМанифестаВТекущемКаталоге() Экспорт

	// Подготовка
	ОжидаемыйВывод = "Не найден файл манифеста в текущем каталоге";

	УстановитьТекущийКаталог("./tests");

	Поделка = ПомощникТестирования.ОтладочнаяПоделка();
	КонсольноеПриложение = Поделка.НайтиЖелудь("КонсольноеПриложение");

	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("upgrade");

	// Действие
	КонсольноеПриложение.Запустить(ПараметрыКоманды);

	// Проверка
	ТекстВывода = ПомощникТестирования.ПолучитьТекстИзПотокаВывода(ПотокВывода);

	Ожидаем.Что(ТекстВывода).Содержит(ОжидаемыйВывод);

КонецПроцедуры

Функция ИзвлечьПутьКФайлуРезервнойКопииИзТекста(Текст)
	
	РегулярноеВыражение = Новый РегулярноеВыражение("Создана резервная копия файла манифеста: (.*)\n");
	Совпадения = РегулярноеВыражение.НайтиСовпадения(Текст);

	Если Совпадения.Количество() > 0 Тогда
		Возврат Совпадения[0].Группы[1].Значение;
	Иначе
		ВызватьИсключение "Резервная копия файл не найдена в тексте вывода";
	КонецЕсли;

КонецФункции