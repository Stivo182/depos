// BSLLS:LineLength-off
// BSLLS:MagicNumber-off
// BSLLS:DuplicateStringLiteral-off

#Использовать "helpers"

Перем Поделка; // Поделка

&Инициализация
Процедура Инициализация() Экспорт

	Поделка = Новый Поделка();
	Поделка.ЗапуститьПриложение();

КонецПроцедуры

&Тест
Процедура ТестДолжен_НайтиОтсутствующиеПакеты() Экспорт
	
	// Подготовка
	ТестовыеСлучаи = ПустаяТаблицаТестовыхСлучаев();
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_src_tests", Ложь, 1);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_src_missing_tests", Ложь, 1);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "missing_manifests_present_src_tests", Ложь, 2);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "missing_manifests_present_src_tests", Истина, 1);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "missing_manifests_present_src", Ложь, 1);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "missing_manifests_present_tests", Истина, 1);

	Анализатор = Поделка.НайтиЖелудь("АнализаторЗависимостей")
		.РабочийКаталог("./tests/fixtures/ПроектДляАнализа")
		.КаталогиИсходников("src")
		.КаталогиДляРазработки("tests");

	Зависимости = ПолучитьЗависимостиПоУмолчанию();

	// Действие
	Результат = Анализатор.ПроверитьЗависимости(Зависимости);
	Пакеты = Результат.ОтсутствующиеПакеты;

	// Проверка
	Ожидаем.Что(Пакеты, "Количество отсутствующих пакетов").ИмеетДлину(ТестовыеСлучаи.Количество());

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		Представление = СтрШаблон("Имя=%1, ДляРазработки=%2", 
			ТестовыйСлучай.ИмяПакета, ТестовыйСлучай.ДляРазработки);

		Отбор = Новый Структура("ИмяПакета, ДляРазработки", ТестовыйСлучай.ИмяПакета, ТестовыйСлучай.ДляРазработки);
		НайденныеСтроки = Пакеты.НайтиСтроки(Отбор);

		Ожидаем.Что(НайденныеСтроки, "Должен быть найден 1 отсутствующий пакет: " + Представление).ИмеетДлину(1);
		Ожидаем.Что(НайденныеСтроки[0].Файлы, "Количество файлов для " + Представление).ИмеетДлину(ТестовыйСлучай.КоличествоФайлов);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_НайтиНеиспользуемыеПакеты() Экспорт
	
	// Подготовка
	ТестовыеСлучаи = ПустаяТаблицаТестовыхСлучаев();
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_tests_missing_src", Ложь);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_missing_src_tests", Ложь);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_src_missing_tests", Истина);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_missing_src_tests", Истина);

	Анализатор = Поделка.НайтиЖелудь("АнализаторЗависимостей")
		.РабочийКаталог("./tests/fixtures/ПроектДляАнализа")
		.КаталогиИсходников("src")
		.КаталогиДляРазработки("tests");

	Зависимости = ПолучитьЗависимостиПоУмолчанию();
	
	// Действие
	Результат = Анализатор.ПроверитьЗависимости(Зависимости);
	Пакеты = Результат.НеиспользуемыеПакеты;

	// Проверка
	Ожидаем.Что(Пакеты, "Количество неиспользуемых пакетов").ИмеетДлину(ТестовыеСлучаи.Количество());

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		Представление = СтрШаблон(
			"Имя=%1, ДляРазработки=%2", 
			ТестовыйСлучай.ИмяПакета,
			ТестовыйСлучай.ДляРазработки
		);

		Отбор = Новый Структура("ИмяПакета, ДляРазработки", ТестовыйСлучай.ИмяПакета, ТестовыйСлучай.ДляРазработки);
		НайденныеСтроки = Пакеты.НайтиСтроки(Отбор);

		Ожидаем.Что(НайденныеСтроки, "Должен быть найден 1 неиспользуемый пакет: " + Представление).ИмеетДлину(1);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_НайтиНеиспользуемыеПакетыСРабочимКаталогомСОтносительнымиПутями() Экспорт
	
	// Подготовка
	ТестовыеСлучаи = ПустаяТаблицаТестовыхСлучаев();
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_tests_missing_src", Ложь);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_missing_src_tests", Ложь);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_src_missing_tests", Истина);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_missing_src_tests", Истина);

	Анализатор = Поделка.НайтиЖелудь("АнализаторЗависимостей")
		.РабочийКаталог("./tests/fixtures/ПроектДляАнализа")
		.КаталогиИсходников("src")
		.КаталогиДляРазработки("tests");

	Зависимости = ПолучитьЗависимостиПоУмолчанию();
	
	// Действие
	Результат = Анализатор.ПроверитьЗависимости(Зависимости);
	Пакеты = Результат.НеиспользуемыеПакеты;

	// Проверка
	Ожидаем.Что(Пакеты, "Количество неиспользуемых пакетов").ИмеетДлину(ТестовыеСлучаи.Количество());

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		Представление = СтрШаблон(
			"Имя=%1, ДляРазработки=%2", 
			ТестовыйСлучай.ИмяПакета,
			ТестовыйСлучай.ДляРазработки
		);

		Отбор = Новый Структура("ИмяПакета, ДляРазработки", ТестовыйСлучай.ИмяПакета, ТестовыйСлучай.ДляРазработки);
		НайденныеСтроки = Пакеты.НайтиСтроки(Отбор);

		Ожидаем.Что(НайденныеСтроки, "Должен быть найден 1 неиспользуемый пакет: " + Представление).ИмеетДлину(1);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_НайтиНеиспользуемыеПакетыБезРабочегоКаталогаСАбсолютнымиПутями() Экспорт
	
	// Подготовка
	ТестовыеСлучаи = ПустаяТаблицаТестовыхСлучаев();
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_tests_missing_src", Ложь);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_missing_src_tests", Ложь);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_src_missing_tests", Истина);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_dev_missing_src_tests", Истина);

	Анализатор = Поделка.НайтиЖелудь("АнализаторЗависимостей")
		.КаталогиИсходников("./tests/fixtures/ПроектДляАнализа/src")
		.КаталогиДляРазработки("./tests/fixtures/ПроектДляАнализа/tests");

	Зависимости = ПолучитьЗависимостиПоУмолчанию();

	// Действие
	Результат = Анализатор.ПроверитьЗависимости(Зависимости);
	Пакеты = Результат.НеиспользуемыеПакеты;

	// Проверка
	Ожидаем.Что(Пакеты, "Количество неиспользуемых пакетов").ИмеетДлину(ТестовыеСлучаи.Количество());

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		Представление = СтрШаблон(
			"Имя=%1, ДляРазработки=%2", 
			ТестовыйСлучай.ИмяПакета,
			ТестовыйСлучай.ДляРазработки
		);

		Отбор = Новый Структура("ИмяПакета, ДляРазработки", ТестовыйСлучай.ИмяПакета, ТестовыйСлучай.ДляРазработки);
		НайденныеСтроки = Пакеты.НайтиСтроки(Отбор);

		Ожидаем.Что(НайденныеСтроки, "Должен быть найден 1 неиспользуемый пакет: " + Представление).ИмеетДлину(1);

	КонецЦикла;

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьИсключениеПакетовДляРазработки() Экспорт
	
	// Подготовка
	ТестовыеСлучаи = ПустаяТаблицаТестовыхСлучаев();
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_tests_missing_src", Ложь);
	ДобавитьТестовыйСлучай(ТестовыеСлучаи, "present_in_prod_missing_src_tests", Ложь);

	Анализатор = Поделка.НайтиЖелудь("АнализаторЗависимостей")
		.РабочийКаталог("./tests/fixtures/ПроектДляАнализа")
		.КаталогиИсходников("src")
		.КаталогиДляРазработки("tests")
		.ИсключатьДляРазработки();

	Зависимости = ПолучитьЗависимостиПоУмолчанию();
	
	// Действие
	Результат = Анализатор.ПроверитьЗависимости(Зависимости);
	Пакеты = Результат.НеиспользуемыеПакеты;

	// Проверка
	Ожидаем.Что(Пакеты, "Количество неиспользуемых пакетов").ИмеетДлину(ТестовыеСлучаи.Количество());

	Для Каждого ТестовыйСлучай Из ТестовыеСлучаи Цикл

		Представление = СтрШаблон(
			"Имя=%1, ДляРазработки=%2", 
			ТестовыйСлучай.ИмяПакета,
			ТестовыйСлучай.ДляРазработки
		);

		Отбор = Новый Структура("ИмяПакета, ДляРазработки", ТестовыйСлучай.ИмяПакета, ТестовыйСлучай.ДляРазработки);
		НайденныеСтроки = Пакеты.НайтиСтроки(Отбор);

		Ожидаем.Что(НайденныеСтроки, "Должен быть найден 1 неиспользуемый пакет: " + Представление).ИмеетДлину(1);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьЗависимостиПоУмолчанию()
	Возврат Новый ЗависимостиПакета().ПрочитатьИзМанифеста("./tests/fixtures/ПроектДляАнализа/packagedef");
КонецФункции

Функция ПустаяТаблицаТестовыхСлучаев()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ИмяПакета");
	Таблица.Колонки.Добавить("ДляРазработки");
	Таблица.Колонки.Добавить("КоличествоФайлов");

	Возврат Таблица;

КонецФункции

Процедура ДобавитьТестовыйСлучай(Таблица, ИмяПакета, ДляРазработки, КоличествоФайлов = Неопределено)

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ИмяПакета = ИмяПакета;
	СтрокаТаблицы.ДляРазработки = ДляРазработки;
	СтрокаТаблицы.КоличествоФайлов = КоличествоФайлов;

КонецПроцедуры