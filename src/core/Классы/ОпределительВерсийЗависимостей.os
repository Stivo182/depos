#Использовать semver
#Использовать packageinfo
#Использовать fs

#Область ОписаниеПеременных

Перем _Зависимости; // ТаблицаЗначений, Неопределено
Перем _ТолькоУстаревшие; // Булево
Перем _ТипВерсии; // Строка, Неопределено
Перем _ИмяПакета; // Строка, Неопределено
Перем _РегулярноеВыражениеСовпаденияИмени; // РегулярноеВыражение, Неопределено
Перем _РегулярноеВыражениеРазделителей; // РегулярноеВыражение
Перем _РегулярноеВыражениеЭкранирования; // РегулярноеВыражение
Перем _ИмяФайлаМанифеста; // Строка, Неопределено

&ЛогDepos
Перем _Лог; // Лог

&Пластилин("ОпределительВерсийПакетов")
Перем _ОпределительВерсийПакетов; // ОпределительВерсийПакетов

#КонецОбласти

#Область Конструктор

&Желудь
&Характер("Компанейский")
Процедура ПриСозданииОбъекта()

	ТолькоУстаревшие(Ложь);
	УстановитьТипВерсии(ТипыВерсий.Последняя);
	
	_РегулярноеВыражениеРазделителей = Новый РегулярноеВыражение("[\s,]+");
	_РегулярноеВыражениеЭкранирования = Новый РегулярноеВыражение("[\\^$.*+?()[\]{}|]");

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает зависимости из переданной таблицы.
//
// Параметры:
//   Зависимости - ТаблицаЗначений - Таблица с данными о зависимостях пакетов:
//     * ИмяПакета - Строка - Имя пакета
//     * ДляРазработки - Булево - Признак зависимости для разработки
//     * МинимальнаяВерсия - Строка - Текущая минимальная версия
//     * МаксимальнаяВерсия - Строка - Текущая максимальная версия
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ИзТаблицы(Зависимости) Экспорт
	_Зависимости = Зависимости.Скопировать(, "ИмяПакета, ДляРазработки, МинимальнаяВерсия, МаксимальнаяВерсия");
	_ИмяФайлаМанифеста = Неопределено;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает путь к файлу манифеста для чтения зависимостей.
//
// Параметры:
//   Файл - Строка - Путь к файлу манифеста
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ИзФайла(Файл) Экспорт
	_ИмяФайлаМанифеста = Файл;
	_Зависимости = Неопределено;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает фильтр по устаревшим пакетам.
//
// Параметры:
//   Включить - Булево - Если Истина, возвращаются только пакеты с устаревшими версиями
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ТолькоУстаревшие(Включить = Истина) Экспорт
	_ТолькоУстаревшие = Включить;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает фильтр по имени пакета.
//
// Параметры:
//   ИмяПакета - Строка - Имена пакетов через запятую или пробел, маска (поддерживает * и ?)
//                        или регулярное выражение (например, /^autumn-.*$/).
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ФильтроватьПоИмени(Знач ИмяПакета) Экспорт
	_ИмяПакета = ИмяПакета;
	_РегулярноеВыражениеСовпаденияИмени = Неопределено;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает тип целевой версии для определения версий пакетов.
//
// Параметры:
//   ТипВерсии - Строка - Тип версии (см. ТипыВерсий)
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция УстановитьТипВерсии(ТипВерсии) Экспорт
	_ТипВерсии = ТипВерсии;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает отфильтрованные зависимости с целевыми версиями.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с колонками:
//     * ИмяПакета - Строка - Имя пакета
//     * ДляРазработки - Булево - Признак зависимости для разработки
//     * МинимальнаяВерсия - Строка - Текущая минимальная версия
//     * МаксимальнаяВерсия - Строка - Текущая максимальная версия
//     * ЦелеваяВерсия - Строка - Рекомендуемая целевая версия
Функция Получить() Экспорт

	Если ЗначениеЗаполнено(_ИмяФайлаМанифеста) Тогда
		ПрочитатьЗависимостиИзМанифеста();
	КонецЕсли;

	Если _Зависимости = Неопределено Тогда
		ВызватьИсключение "Не указан источник зависимостей (файл манифеста или таблица).";
	КонецЕсли;

	Если _РегулярноеВыражениеСовпаденияИмени = Неопределено Тогда
		ПодготовитьРегулярноеВыражениеНаСовпадениеИмениПакета();
	КонецЕсли;

	ОтобранныеЗависимости = ПолучитьОтобранныеЗависимости();
	ЦелевыеВерсииПакетов = _ОпределительВерсийПакетов.НайтиВерсии(ОтобранныеЗависимости, _ТипВерсии);

	Результат = ПустаяТаблицаРезультата();

	Для Каждого СтрокаЗависимости Из ОтобранныеЗависимости Цикл

		Версия = ЦелевыеВерсииПакетов[СтрокаЗависимости.ИмяПакета];

		ВерсияБольшеМинимальной = ЗначениеЗаполнено(Версия) 
			И ЗначениеЗаполнено(СтрокаЗависимости.МинимальнаяВерсия)
			И Версии.ВерсияБольше(Версия, Новый Версия(СтрокаЗависимости.МинимальнаяВерсия));
		
		Если Не _ТолькоУстаревшие Или ВерсияБольшеМинимальной Тогда
			СтрокаРезультат = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаЗависимости);
			СтрокаРезультат.ЦелеваяВерсия = Версия;
		КонецЕсли;

	КонецЦикла;

	Результат.Сортировать("ДляРазработки, ИмяПакета");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьЗависимостиИзМанифеста()

	Если Не ФС.ФайлСуществует(_ИмяФайлаМанифеста) Тогда
		ВызватьИсключение СтрШаблон("Не найден файл манифеста '%1'", _ИмяФайлаМанифеста);
	КонецЕсли;

	_Лог.Отладка("Чтение зависимостей из файла манифеста '%1'", _ИмяФайлаМанифеста);

	Попытка		
		ИнформацияОПакете = Новый ИнформацияОПакете(_ИмяФайлаМанифеста);
	Исключение
		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			"Возникла ошибка при получении зависимостей из файла манифеста '%1'",
			_ИмяФайлаМанифеста
		);
	КонецПопытки;

	ИзТаблицы(ИнформацияОПакете.Зависимости());

КонецПроцедуры

Функция ПолучитьОтобранныеЗависимости() Экспорт

	ОтобранныеЗависимости = _Зависимости.Скопировать(Новый Массив());

	Для Каждого СтрокаТаблицы Из _Зависимости Цикл
		Если ИмяПакетаСовпадает(СтрокаТаблицы.ИмяПакета) Тогда
			ЗаполнитьЗначенияСвойств(ОтобранныеЗависимости.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Возврат ОтобранныеЗависимости;

КонецФункции

Функция ИмяПакетаСовпадает(ИмяПакета)
	
	Если _РегулярноеВыражениеСовпаденияИмени = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат _РегулярноеВыражениеСовпаденияИмени.Совпадает(ИмяПакета);

КонецФункции

Функция ПустаяТаблицаРезультата()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ИмяПакета", ТипСтрока);
	Результат.Колонки.Добавить("ДляРазработки", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("МинимальнаяВерсия", ТипСтрока);
	Результат.Колонки.Добавить("МаксимальнаяВерсия", ТипСтрока);
	Результат.Колонки.Добавить("ЦелеваяВерсия", ТипСтрока);

	Возврат Результат;

КонецФункции

Процедура ПодготовитьРегулярноеВыражениеНаСовпадениеИмениПакета()

	Если Не ЗначениеЗаполнено(_ИмяПакета) Тогда
		Возврат;
	КонецЕсли;

	ИмяПакета = СокрЛП(_ИмяПакета);
	ЭтоРегулярноеВыражение = Лев(ИмяПакета, 1) = "/" И Прав(ИмяПакета, 1) = "/";

	Если ЭтоРегулярноеВыражение Тогда
		Паттерн = Сред(ИмяПакета, 2, СтрДлина(ИмяПакета) - 2);
	Иначе
		Паттерн = ОбработатьМаскиИИменаПакетов(ИмяПакета);
	КонецЕсли;
	
	_РегулярноеВыражениеСовпаденияИмени = Новый РегулярноеВыражение(Паттерн);

КонецПроцедуры

// Обрабатывает маски и имена пакетов для создания регулярного выражения
//
// Параметры:
//   ИмяПакета - Строка - Имя пакета с возможными масками и разделителями
//
// Возвращаемое значение:
//   Строка - Готовый паттерн для регулярного выражения
Функция ОбработатьМаскиИИменаПакетов(ИмяПакета)
	
	Паттерн = СокрЛП(ИмяПакета);
	
	// Экранируем специальные символы регулярных выражений
	Паттерн = ЭкранироватьСлужебныеСимволыRegEx(Паттерн);
	
	// Заменяем маски на соответствующие регулярные выражения
	Паттерн = СтрЗаменить(Паттерн, "\*", ".*");
	Паттерн = СтрЗаменить(Паттерн, "\?", ".?");
	
	// Обрабатываем разделители
	Паттерн = НормализоватьРазделителиДляRegEx(Паттерн);
	
	// Оборачиваем в якоря начала и конца строки
	Возврат СтрШаблон("^(%1)$", Паттерн);
	
КонецФункции

Функция НормализоватьРазделителиДляRegEx(Паттерн)
	Возврат _РегулярноеВыражениеРазделителей.Заменить(Паттерн, "|");
КонецФункции

Функция ЭкранироватьСлужебныеСимволыRegEx(Строка)
	Возврат _РегулярноеВыражениеЭкранирования.Заменить(Строка, "\$0");
КонецФункции

#КонецОбласти