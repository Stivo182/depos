
#Использовать "../../internal"

Перем _Зависимости; // ТаблицаЗначений
Перем _РегулярноеВыражениеИмениПакета; // РегулярноеВыражение, Неопределено
Перем _РегулярноеВыражениеРазделителей; // РегулярноеВыражение
Перем _РегулярноеВыражениеЭкранирования; // РегулярноеВыражение
Перем _Лог; // Лог

#Область Конструктор

Процедура ПриСозданииОбъекта()

	_Зависимости = ПустаяТаблицаЗависимостей();
	_РегулярноеВыражениеРазделителей = Новый РегулярноеВыражение("[\s,]+");
	_РегулярноеВыражениеЭкранирования = Новый РегулярноеВыражение("[\\^$.*+?()[\]{}|]");
	_Лог = Логирование.ПолучитьЛог("oscript.lib.depos");

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Загружает зависимости из файла манифеста пакета.
//
// Параметры:
//   ИмяФайла - Строка - Полный путь к файлу манифеста (packagedef)
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ПрочитатьИзМанифеста(ИмяФайла) Экспорт

	Попытка		
		ИнформацияОПакете = Новый ИнформацияОПакете(ИмяФайла);
	Исключение
		_Лог.Ошибка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			"Возникла ошибка при получении зависимостей из файла манифеста '%1': %2",
			ИмяФайла,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

	ПрочитатьИзТаблицы(ИнформацияОПакете.Зависимости());

	Возврат ЭтотОбъект;

КонецФункции

// Загружает зависимости из готовой таблицы значений.
//
// Параметры:
//   Зависимости - ТаблицаЗначений - Таблица с данными о зависимостях пакетов:
//     * ИмяПакета          - Строка - Имя пакета
//     * ДляРазработки      - Булево - Признак зависимости для разработки
//     * МинимальнаяВерсия  - Строка - Минимально допустимая версия
//     * МаксимальнаяВерсия - Строка - Максимально допустимая версия
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ПрочитатьИзТаблицы(Зависимости) Экспорт

	_Зависимости.Очистить();

	Для Каждого СтрокаТаблицы Из Зависимости Цикл
		ДобавитьЗависимостьВТаблицу(
			СтрокаТаблицы.ИмяПакета,
			СтрокаТаблицы.МинимальнаяВерсия,
			СтрокаТаблицы.МаксимальнаяВерсия,
			СтрокаТаблицы.ДляРазработки
		);
	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

// Фильтрует зависимости по имени пакета с поддержкой масок и регулярных выражений.
//
// Параметры:
//   Фильтр - Строка - Имена пакетов через запятую или пробел,
//                     маска с символами * (любые символы) и ? (один символ)
//                     или регулярное выражение (например, /^autumn-.*$/).
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ФильтроватьПоИмени(Фильтр) Экспорт

	Если Не ЗначениеЗаполнено(Фильтр) Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;

	ПодготовитьРегулярноеВыражениеИмениПакета(Фильтр);

	Количество = _Зависимости.Количество();
	Для Инд = 1 По Количество Цикл
		СтрокаТаблицы = _Зависимости[Количество - Инд];
		Если Не СоответствуетФильтруПоИмени(СтрокаТаблицы.ИмяПакета) Тогда
			_Зависимости.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет новую зависимость в коллекцию.
//
// Параметры:
//   ИмяПакета          - Строка - Имя пакета
//   МинимальнаяВерсия  - Строка - Минимально допустимая версия
//   МаксимальнаяВерсия - Строка - Максимально допустимая версия
//   ДляРазработки      - Булево - Признак зависимости для разработки
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция Добавить(ИмяПакета, МинимальнаяВерсия = "", МаксимальнаяВерсия = "", ДляРазработки = Ложь) Экспорт
	ДобавитьЗависимостьВТаблицу(ИмяПакета, МинимальнаяВерсия, МаксимальнаяВерсия, ДляРазработки);
	Возврат ЭтотОбъект;
КонецФункции

// Добавляет новую зависимость для разработки.
//
// Параметры:
//   ИмяПакета          - Строка - Имя пакета
//   МинимальнаяВерсия  - Строка - Минимально допустимая версия
//   МаксимальнаяВерсия - Строка - Максимально допустимая версия
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция ДобавитьДляРазработки(ИмяПакета, МинимальнаяВерсия = "", МаксимальнаяВерсия = "") Экспорт
	ДобавитьЗависимостьВТаблицу(ИмяПакета, МинимальнаяВерсия, МаксимальнаяВерсия, Истина);
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает копию внутренней таблицы зависимостей.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ИмяПакета          - Строка - Имя пакета
//     * ДляРазработки      - Булево - Признак зависимости для разработки
//     * МинимальнаяВерсия  - Строка - Минимально допустимая версия
//     * МаксимальнаяВерсия - Строка - Максимально допустимая версия
Функция ВТаблицу() Экспорт
	Возврат _Зависимости.Скопировать();
КонецФункции

// Проверяет, что коллекция зависимостей пустая.
//
// Возвращаемое значение:
//   Булево - Истина, если в коллекции нет ни одной зависимости;
//            Ложь, если есть хотя бы одна зависимость.
Функция Пустой() Экспорт
	Возврат _Зависимости.Количество() = 0;
КонецФункции

// Вычисляет изменения в зависимостях по сравнению с другой коллекцией
// и формирует таблицу с результатами.
//
// Параметры:
//   Зависимости - ЗависимостиПакета - Коллекция исходных зависимостей для сравнения.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ИмяПакета              - Строка - Имя пакета
//     * ДляРазработки          - Булево - Признак зависимости для разработки
//     * МинимальнаяВерсияДо    - Строка - Версия в исходной коллекции
//     * МинимальнаяВерсияПосле - Строка - Версия в текущей коллекции
//     * МаксимальнаяВерсия     - Строка - Максимальная версия
Функция ВычислитьИзменения(Зависимости) Экспорт
	
	ТаблицаИсходная = Зависимости.ВТаблицу();
	ТипСтрока = Новый ОписаниеТипов("Строка");

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ИмяПакета", ТипСтрока);
	Результат.Колонки.Добавить("ДляРазработки", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("МинимальнаяВерсияДо", ТипСтрока);
	Результат.Колонки.Добавить("МинимальнаяВерсияПосле", ТипСтрока);
	Результат.Колонки.Добавить("МаксимальнаяВерсия", ТипСтрока);

	Для Каждого СтрокаТекущая Из _Зависимости Цикл

		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата.ИмяПакета = СтрокаТекущая.ИмяПакета;
		СтрокаРезультата.ДляРазработки = СтрокаТекущая.ДляРазработки;
		СтрокаРезультата.МинимальнаяВерсияПосле = СтрокаТекущая.МинимальнаяВерсия;
		СтрокаРезультата.МаксимальнаяВерсия = СтрокаТекущая.МаксимальнаяВерсия;

		СтрокаСопоставляемая = ТаблицаИсходная.Найти(СтрокаТекущая.ИмяПакета, "ИмяПакета");
		Если Не СтрокаСопоставляемая = Неопределено Тогда
			СтрокаРезультата.МинимальнаяВерсияДо = СтрокаСопоставляемая.МинимальнаяВерсия;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗависимостьВТаблицу(ИмяПакета, МинимальнаяВерсия, МаксимальнаяВерсия, ДляРазработки)
		
	СтрокаТаблицы = _Зависимости.Найти(ИмяПакета, "ИмяПакета");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = _Зависимости.Добавить();
	КонецЕсли;

	СтрокаТаблицы.ИмяПакета = ИмяПакета;
	СтрокаТаблицы.МинимальнаяВерсия = МинимальнаяВерсия;
	СтрокаТаблицы.МаксимальнаяВерсия = МаксимальнаяВерсия;
	СтрокаТаблицы.ДляРазработки = ДляРазработки;

КонецПроцедуры

Функция СоответствуетФильтруПоИмени(ИмяПакета)
	
	Если _РегулярноеВыражениеИмениПакета = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат _РегулярноеВыражениеИмениПакета.Совпадает(ИмяПакета);

КонецФункции

Процедура ПодготовитьРегулярноеВыражениеИмениПакета(Фильтр)

	Если Не ЗначениеЗаполнено(Фильтр) Тогда
		_РегулярноеВыражениеИмениПакета = Неопределено;
		Возврат;
	КонецЕсли;

	Фильтр = СокрЛП(Фильтр);
	ЭтоРегулярноеВыражение = Лев(Фильтр, 1) = "/" И Прав(Фильтр, 1) = "/";

	Если ЭтоРегулярноеВыражение Тогда
		Паттерн = Сред(Фильтр, 2, СтрДлина(Фильтр) - 2);
	Иначе
		Паттерн = ОбработатьМаскиИИменаПакетов(Фильтр);
	КонецЕсли;
	
	_РегулярноеВыражениеИмениПакета = Новый РегулярноеВыражение(Паттерн);

КонецПроцедуры

// Обрабатывает маски и имена пакетов для создания регулярного выражения
//
// Параметры:
//   Фильтр - Строка - Имя пакета с возможными масками и разделителями
//
// Возвращаемое значение:
//   Строка - Готовый паттерн для регулярного выражения
Функция ОбработатьМаскиИИменаПакетов(Фильтр)
	
	Паттерн = СокрЛП(Фильтр);
	
	// Экранируем специальные символы регулярных выражений
	Паттерн = ЭкранироватьСлужебныеСимволыДляРегулярногоВыражения(Паттерн);
	
	// Заменяем маски на соответствующие регулярные выражения
	Паттерн = СтрЗаменить(Паттерн, "\*", ".*");
	Паттерн = СтрЗаменить(Паттерн, "\?", ".?");
	
	// Обрабатываем разделители
	Паттерн = НормализоватьРазделителиДляРегулярногоВыражения(Паттерн);
	
	// Оборачиваем в якоря начала и конца строки
	Возврат СтрШаблон("^(%1)$", Паттерн);
	
КонецФункции

Функция НормализоватьРазделителиДляРегулярногоВыражения(Паттерн)
	Возврат _РегулярноеВыражениеРазделителей.Заменить(Паттерн, "|");
КонецФункции

Функция ЭкранироватьСлужебныеСимволыДляРегулярногоВыражения(Строка)
	Возврат _РегулярноеВыражениеЭкранирования.Заменить(Строка, "\$0");
КонецФункции

Функция ПустаяТаблицаЗависимостей()

	ТипСтрока = Новый ОписаниеТипов("Строка");

	Зависимости = Новый ТаблицаЗначений();
	Зависимости.Колонки.Добавить("ИмяПакета", ТипСтрока);
	Зависимости.Колонки.Добавить("ДляРазработки", Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("МинимальнаяВерсия", ТипСтрока);
	Зависимости.Колонки.Добавить("МаксимальнаяВерсия", ТипСтрока);

	Возврат Зависимости;

КонецФункции

#КонецОбласти