
#Использовать "../../internal"

Перем _Зависимости; // ТаблицаЗначений
Перем _ФильтрПоИмени; // Строка
Перем _РегулярноеВыражениеИмениПакета; // РегулярноеВыражение, Неопределено
Перем _РегулярноеВыражениеРазделителей; // РегулярноеВыражение
Перем _РегулярноеВыражениеЭкранирования; // РегулярноеВыражение

#Область Конструктор

Процедура ПриСозданииОбъекта()

	_Зависимости = ПустаяТаблицаЗависимостей();
	_ФильтрПоИмени = "";
	_РегулярноеВыражениеРазделителей = Новый РегулярноеВыражение("[\s,]+");
	_РегулярноеВыражениеЭкранирования = Новый РегулярноеВыражение("[\\^$.*+?()[\]{}|]");

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Читает информацию о зависимостях из файла манифеста пакета.
//
// Параметры:
//   ИмяФайла - Строка - Полный путь к файлу манифеста (packagedef)
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с информацией о зависимостях пакета:
//     * ИмяПакета - Строка - Имя пакета-зависимости
//     * ДляРазработки - Булево - Признак зависимости для разработки
//     * МинимальнаяВерсия - Строка - Минимально допустимая версия пакета
//     * МаксимальнаяВерсия - Строка - Максимально допустимая версия пакета
//
// Исключения:
//   - Если файл манифеста не существует по указанному пути
//   - Если возникла ошибка при парсинге файла манифеста
Функция ПрочитатьИзМанифеста(ИмяФайла) Экспорт

	Попытка		
		ИнформацияОПакете = Новый ИнформацияОПакете(ИмяФайла);
	Исключение
		ВызватьИсключение СтрШаблон(
			"Возникла ошибка при получении зависимостей из файла манифеста '%1'",
			ИмяФайла
		);
	КонецПопытки;

	ПрочитатьИзТаблицы(ИнформацияОПакете.Зависимости());

	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает зависимости из переданной таблицы.
//
// Параметры:
//   Зависимости - ТаблицаЗначений - Таблица с данными о зависимостях пакетов:
//     * ИмяПакета - Строка - Имя пакета
//     * ДляРазработки - Булево - Признак зависимости для разработки
//     * МинимальнаяВерсия - Строка - Текущая минимальная версия
//     * МаксимальнаяВерсия - Строка - Текущая максимальная версия
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ПрочитатьИзТаблицы(Зависимости) Экспорт

	_Зависимости.Очистить();

	Для Каждого СтрокаТаблицы Из Зависимости Цикл
		ДобавитьЗависимостьВТаблицу(
			СтрокаТаблицы.ИмяПакета,
			СтрокаТаблицы.МинимальнаяВерсия,
			СтрокаТаблицы.МаксимальнаяВерсия,
			СтрокаТаблицы.ДляРазработки
		);
	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

// Фильтрует по имени пакета, маске или регулярному выражению.
//
// Параметры:
//   Фильтр - Строка - Имена пакетов через запятую или пробел, маска (поддерживает * и ?)
//                     или регулярное выражение (например, /^autumn-.*$/).
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ФильтроватьПоИмени(Фильтр) Экспорт
	_ФильтрПоИмени = Фильтр;
	ПрименитьФильтры();
	Возврат ЭтотОбъект;
КонецФункции

// Добавляет пакет.
//
// Параметры:
//   ИмяПакета - Строка - Имя пакета.
//   МинимальнаяВерсия - Строка - Минимальная версия пакета.
//   МаксимальнаяВерсия - Строка -  Максимальная версия пакета.
//   ДляРазработки - Строка -  Признак зависимости для разработки.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция Добавить(ИмяПакета, МинимальнаяВерсия = "", МаксимальнаяВерсия = "", ДляРазработки = Ложь) Экспорт
	ДобавитьЗависимостьВТаблицу(ИмяПакета, МинимальнаяВерсия, МаксимальнаяВерсия, ДляРазработки);
	Возврат ЭтотОбъект;
КонецФункции

// Добавляет пакет для разработки.
//
// Параметры:
//   ИмяПакета - Строка - Имя пакета.
//   МинимальнаяВерсия - Строка - Минимальная версия пакета.
//   МаксимальнаяВерсия - Строка -  Максимальная версия пакета.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция ДобавитьДляРазработки(ИмяПакета, МинимальнаяВерсия = "", МаксимальнаяВерсия = "") Экспорт
	ДобавитьЗависимостьВТаблицу(ИмяПакета, МинимальнаяВерсия, МаксимальнаяВерсия, Истина);
	Возврат ЭтотОбъект;
КонецФункции

// Преобразует в таблицу значений
//
// Возвращаемое значение:
//   ТаблицаЗначений
Функция ВТаблицу() Экспорт
	Возврат _Зависимости.Скопировать();
КонецФункции

// Определяет, что коллекция пустая.
//
// Возвращаемое значение:
//   Булево
Функция Пустой() Экспорт
	Возврат _Зависимости.Количество() = 0;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗависимостьВТаблицу(ИмяПакета, МинимальнаяВерсия, МаксимальнаяВерсия, ДляРазработки)
		
	СтрокаТаблицы = _Зависимости.Найти(ИмяПакета, "ИмяПакета");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = _Зависимости.Добавить();
	КонецЕсли;

	СтрокаТаблицы.ИмяПакета = ИмяПакета;
	СтрокаТаблицы.МинимальнаяВерсия = МинимальнаяВерсия;
	СтрокаТаблицы.МаксимальнаяВерсия = МаксимальнаяВерсия;
	СтрокаТаблицы.ДляРазработки = ДляРазработки;

КонецПроцедуры

Процедура ПрименитьФильтры()

	ПодготовитьРегулярноеВыражениеИмениПакета(_ФильтрПоИмени);

	Если Не ЗначениеЗаполнено(_ФильтрПоИмени) Тогда
		Возврат;
	КонецЕсли;

	Количество = _Зависимости.Количество();
	Для Инд = 1 По Количество Цикл
		СтрокаТаблицы = _Зависимости[Количество - Инд];
		Если Не СоответствуетФильтруПоИмени(СтрокаТаблицы.ИмяПакета) Тогда
			_Зависимости.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция СоответствуетФильтруПоИмени(ИмяПакета)
	
	Если _РегулярноеВыражениеИмениПакета = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат _РегулярноеВыражениеИмениПакета.Совпадает(ИмяПакета);

КонецФункции

Процедура ПодготовитьРегулярноеВыражениеИмениПакета(Фильтр)

	Если Не ЗначениеЗаполнено(Фильтр) Тогда
		_РегулярноеВыражениеИмениПакета = Неопределено;
		Возврат;
	КонецЕсли;

	Фильтр = СокрЛП(Фильтр);
	ЭтоРегулярноеВыражение = Лев(Фильтр, 1) = "/" И Прав(Фильтр, 1) = "/";

	Если ЭтоРегулярноеВыражение Тогда
		Паттерн = Сред(Фильтр, 2, СтрДлина(Фильтр) - 2);
	Иначе
		Паттерн = ОбработатьМаскиИИменаПакетов(Фильтр);
	КонецЕсли;
	
	_РегулярноеВыражениеИмениПакета = Новый РегулярноеВыражение(Паттерн);

КонецПроцедуры

// Обрабатывает маски и имена пакетов для создания регулярного выражения
//
// Параметры:
//   Фильтр - Строка - Имя пакета с возможными масками и разделителями
//
// Возвращаемое значение:
//   Строка - Готовый паттерн для регулярного выражения
Функция ОбработатьМаскиИИменаПакетов(Фильтр)
	
	Паттерн = СокрЛП(Фильтр);
	
	// Экранируем специальные символы регулярных выражений
	Паттерн = ЭкранироватьСлужебныеСимволыДляРегулярногоВыражения(Паттерн);
	
	// Заменяем маски на соответствующие регулярные выражения
	Паттерн = СтрЗаменить(Паттерн, "\*", ".*");
	Паттерн = СтрЗаменить(Паттерн, "\?", ".?");
	
	// Обрабатываем разделители
	Паттерн = НормализоватьРазделителиДляРегулярногоВыражения(Паттерн);
	
	// Оборачиваем в якоря начала и конца строки
	Возврат СтрШаблон("^(%1)$", Паттерн);
	
КонецФункции

Функция НормализоватьРазделителиДляРегулярногоВыражения(Паттерн)
	Возврат _РегулярноеВыражениеРазделителей.Заменить(Паттерн, "|");
КонецФункции

Функция ЭкранироватьСлужебныеСимволыДляРегулярногоВыражения(Строка)
	Возврат _РегулярноеВыражениеЭкранирования.Заменить(Строка, "\$0");
КонецФункции

Функция ПустаяТаблицаЗависимостей()

	ТипСтрока = Новый ОписаниеТипов("Строка");

	Зависимости = Новый ТаблицаЗначений();
	Зависимости.Колонки.Добавить("ИмяПакета", ТипСтрока);
	Зависимости.Колонки.Добавить("ДляРазработки", Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("МинимальнаяВерсия", ТипСтрока);
	Зависимости.Колонки.Добавить("МаксимальнаяВерсия", ТипСтрока);

	Возврат Зависимости;

КонецФункции

#КонецОбласти