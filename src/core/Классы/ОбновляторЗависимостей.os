#Использовать packageinfo
#Использовать fs
#Использовать "../../internal"

#Область ОписаниеПеременных

Перем _Зависимости; // ТаблицаЗначений, Неопределено
Перем _ИмяФайлаМанифеста; // Строка, Неопределено
Перем _СохранятьКопию; // Булево
Перем _РезервнаяКопия; // Строка, Неопределено
Перем _МанифестМодифицирован; // Булево

&ЛогDepos
Перем _Лог; // Лог

#КонецОбласти

#Область Конструктор

&Желудь
&Характер("Компанейский")
Процедура ПриСозданииОбъекта()

	_МанифестМодифицирован = Ложь;

	СохранятьКопию(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Обновляет зависимости в файле манифеста пакета.
//
// Параметры:
//   ФайлМанифеста - Строка - Полный путь к файлу манифеста пакета
//   Зависимости - ЗависимостиПакета - Зависимости с целевыми версиями пакетов
Процедура Обновить(ФайлМанифеста, Зависимости) Экспорт
		
	_ИмяФайлаМанифеста = ФайлМанифеста;
	_Зависимости = Зависимости.ВТаблицу();
	_МанифестМодифицирован = Ложь;

	_Лог.Отладка("Начало обновления зависимостей в файле манифеста '%1'", _ИмяФайлаМанифеста);

	Если Не ЗначениеЗаполнено(_Зависимости) Тогда
		_Лог.Предупреждение("Нет зависимостей для обновления файла манифеста '%1'", _ИмяФайлаМанифеста);
		Возврат;
	КонецЕсли;

	Попытка

		ОбновитьФайлМанифеста();
		ПроверитьЗависимостиФайлаМанифеста();
	
		_Лог.Отладка("Зависимости успешно обновлены в файле '%1'", _ИмяФайлаМанифеста);

	Исключение

		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОткатитьИзменения();

		ВызватьИсключение СтрШаблон(
			"Не удалось выполнить обновление зависимостей. %1", 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);

	КонецПопытки;
	
	УдалитьРезервнуюКопию();

КонецПроцедуры

// Устанавливает флаг сохранения резервной копии файла манифеста.
//
// Параметры:
//   Сохранять - Булево - Если Истина, резервная копия сохраняется после обновления (по умолчанию Истина).
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция СохранятьКопию(Сохранять = Истина) Экспорт
	_СохранятьКопию = Сохранять;
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет зависимости в файле манифеста.
Процедура ОбновитьФайлМанифеста()
	
	НовоеСодержимое = СформироватьСодержимоеФайлаМанифеста();
	Если НовоеСодержимое = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СоздатьРезервнуюКопию();

	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(_ИмяФайлаМанифеста, "UTF-8");
		ЗаписьТекста.Записать(НовоеСодержимое);
		ЗаписьТекста.Закрыть();

		_МанифестМодифицирован = Истина;
	Исключение
		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			"Возникла ошибка при записи файла манифеста '%1': %2",
			_ИмяФайлаМанифеста,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

КонецПроцедуры

// Формирует обновленное содержимое файла манифеста с учетом текущих зависимостей.
//
// Возвращаемое значение:
//   Строка, Неопределено - Обновленное содержимое файла или Неопределено, если зависимости не найдены.
Функция СформироватьСодержимоеФайлаМанифеста()
	
	_ТекстОшибкаПарсинга = "Возникла ошибка при парсинге манифеста";
	
	СодержимоеФайла = ПрочитатьСодержимоеФайлаМанифеста();
	Совпадения = ПолучитьСовпаденияВТекстеМанифеста(СодержимоеФайла);

	Если Совпадения.Количество() = 0 Тогда
		_Лог.Предупреждение("Не найдены зависимости в файле манифеста '%1'", _ИмяФайлаМанифеста);
		Возврат Неопределено;
	КонецЕсли;
	
	ИнформацияОПакетеДоИзменений = Новый ИнформацияОПакете(_ИмяФайлаМанифеста);
	Результат = Новый Массив();
	ПоследнийИндекс = 0;

	Для Каждого Совпадение Из Совпадения Цикл

		ИмяПакета = Совпадение.Группы[1].Значение;

		СовпадениеВерсия = Совпадение.Группы[2];
		МинимальнаяВерсия = СовпадениеВерсия.Значение;

		Если Не ЗначениеЗаполнено(МинимальнаяВерсия) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗависимостьИзИнформацииОПакете = ИнформацияОПакетеДоИзменений.Зависимость(ИмяПакета);
		Если ЗависимостьИзИнформацииОПакете = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				"%1: найден несуществующий пакет '%2'.",
				_ТекстОшибкаПарсинга,
				ИмяПакета
			);
		КонецЕсли;

		Если Не ВерсииСовпадают(ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия, МинимальнаяВерсия) Тогда
			ВызватьИсключение СтрШаблон(
				"%1: для пакета '%2' ожидалась версия '%3' вместо '%4'.", 
				_ТекстОшибкаПарсинга, 
				ИмяПакета,
				ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия,
				МинимальнаяВерсия
			);
		КонецЕсли;

		Зависимость = _Зависимости.Найти(ИмяПакета, "ИмяПакета");
		Если Зависимость = Неопределено Или Не ЗначениеЗаполнено(Зависимость.МинимальнаяВерсия) Тогда
			Продолжить;
		КонецЕсли;

		ЧислоСимволов = СовпадениеВерсия.Индекс - ?(ПоследнийИндекс = 0, 0, ПоследнийИндекс - 1);

		Результат.Добавить(Сред(СодержимоеФайла, ПоследнийИндекс, ЧислоСимволов));
		Результат.Добавить(Зависимость.МинимальнаяВерсия);

		ПоследнийИндекс = СовпадениеВерсия.Индекс + СовпадениеВерсия.Длина + 1;

	КонецЦикла;

	Результат.Добавить(Сред(СодержимоеФайла, ПоследнийИндекс));

	Возврат СтрСоединить(Результат);
		
КонецФункции

// Читает содержимое файла манифеста.
//
// Возвращаемое значение:
//   Строка - Содержимое файла.
//
// Вызывает исключение:
//   Если файл не удалось прочитать.
Функция ПрочитатьСодержимоеФайлаМанифеста()
	
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста(_ИмяФайлаМанифеста, КодировкаТекста.UTF8);
		СодержимоеФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Возврат СодержимоеФайла;
	Исключение
		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			"Возникла ошибка при чтении файла манифеста '%1': %2",
			_ИмяФайлаМанифеста, 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

КонецФункции

Функция ПолучитьСовпаденияВТекстеМанифеста(ТекстМанифеста)

	Паттерн = "(?:ЗависитОт|РазработкаЗависитОт)\s*\(\s*""([^""]+)""\s*(?:,\s*""([^""]+)""\s*(?:,\s*""([^""]+)"")?\s*)?\)";

	РегулярноеВыражение = Новый РегулярноеВыражение(Паттерн);
	РегулярноеВыражение.Многострочный = Истина;
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;

	Возврат РегулярноеВыражение.НайтиСовпадения(ТекстМанифеста);

КонецФункции

// Проверяет зависимости в файле манифеста после обновления.
//
// Вызывает исключение:
//   Если файл манифеста не удалось прочитать или зависимости не соответствуют ожидаемым.
Процедура ПроверитьЗависимостиФайлаМанифеста()
	
	ТекстОшибкиНеудачнаяПроверка  = "Проверка зависимостей закончилась неудачей: %1";

	Попытка	
		ИнформацияОПакетеПослеИзменений = Новый ИнформацияОПакете(_ИмяФайлаМанифеста);
	Исключение
		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			ТекстОшибкиНеудачнаяПроверка ,
			"возникла ошибка при получении зависимостей из файла манифеста."
		);
	КонецПопытки;

	Для Каждого Зависимость Из _Зависимости Цикл
	
		Если Не ЗначениеЗаполнено(Зависимость.МинимальнаяВерсия) Тогда
			Продолжить;
		КонецЕсли;
			
		ЗависимостьИзИнформацииОПакете = ИнформацияОПакетеПослеИзменений.Зависимость(Зависимость.ИмяПакета);
		
		// Не найдена зависимость в манифесте пакета
		Если ЗависимостьИзИнформацииОПакете = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				ТекстОшибкиНеудачнаяПроверка ,
				СтрШаблон("не найдена зависимость '%1' в файле манифеста.", Зависимость.ИмяПакета)
			);
		КонецЕсли;

		// Неверно установилась версия пакета
		Если Не ВерсииСовпадают(ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия, Зависимость.МинимальнаяВерсия) Тогда
			ТекстОшибки = СтрШаблон(
				"для пакета '%1' ожидалась версия '%2' вместо '%3'.",
				Зависимость.ИмяПакета,
				Зависимость.МинимальнаяВерсия,
				ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия
			);
			ВызватьИсключение СтрШаблон(ТекстОшибкиНеудачнаяПроверка , ТекстОшибки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СоздатьРезервнуюКопию()

	РезервнаяКопия = НовоеИмяФайлаРезервнойКопии();

	Попытка
		КопироватьФайл(_ИмяФайлаМанифеста, РезервнаяКопия);

		ТекстСообщения = СтрШаблон("Создана резервная копия файла манифеста: %1", РезервнаяКопия);
		Если _СохранятьКопию Тогда
			Консоль.ВывестиСтроку(" ");
			Консоль.ВывестиСтроку(ТекстСообщения);
		Иначе
			_Лог.Отладка(ТекстСообщения);
		КонецЕсли;
	Исключение
		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			"Ошибка создания резервной копии файла манифеста '%1': %2",
			РезервнаяКопия,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

КонецПроцедуры

Функция НовоеИмяФайлаРезервнойКопии()

	Файл = Новый Файл(_ИмяФайлаМанифеста);
	ИмяФайла = Файл.Имя + "_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd_HHmmss");

	_РезервнаяКопия = ОбъединитьПути(Файл.Путь, ИмяФайла);

	Возврат _РезервнаяКопия;

КонецФункции

Процедура ОткатитьИзменения()

	Если Не _МанифестМодифицирован Тогда
		УдалитьРезервнуюКопию();
		Возврат;	
	КонецЕсли;

	Если ВосстановитьИзРезервнойКопии() Тогда
		УдалитьРезервнуюКопию();
	КонецЕсли;

КонецПроцедуры

Функция ВосстановитьИзРезервнойКопии()

	ТекстОшибки = "Не удалось восстановить файл манифеста из резервной копии: %1";

	_Лог.Отладка(СтрШаблон("Начало восстановления файла манифеста из резервной копии '%1'", _РезервнаяКопия));

	Если Не ФС.ФайлСуществует(_РезервнаяКопия) Тогда
		_Лог.Ошибка(ТекстОшибки, СтрШаблон("не найден файл резервной копии '%1'", _РезервнаяКопия));
		Возврат Ложь;
	КонецЕсли;

	Попытка
		КопироватьФайл(_РезервнаяКопия, _ИмяФайлаМанифеста);
		_Лог.Предупреждение("Файл манифеста успешно восстановлен из резервной копии");
		Возврат Истина;
	Исключение
		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		_Лог.Ошибка(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

КонецФункции

Процедура УдалитьРезервнуюКопию()
			
	Если _СохранятьКопию Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(_РезервнаяКопия) Или Не ФС.ФайлСуществует(_РезервнаяКопия) Тогда
		Возврат;	
	КонецЕсли;

	Попытка
		УдалитьФайлы(_РезервнаяКопия);
		_Лог.Отладка("Резервная копия удалена '%1'", _РезервнаяКопия);
	Исключение
		_Лог.Отладка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		_Лог.Предупреждение(
			"Не удалось удалить резервную копию '%1': %2",
			_РезервнаяКопия,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

	_РезервнаяКопия = Неопределено;
	
КонецПроцедуры

Функция ВерсииСовпадают(Версия1, Версия2)
	Возврат Не ЗначениеЗаполнено(Версия1) И Не ЗначениеЗаполнено(Версия2) Или Версия1 = Версия2;
КонецФункции

#КонецОбласти