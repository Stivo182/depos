#Использовать packageinfo
#Использовать autumn-logos
#Использовать fs
#Использовать "../../internal"

#Область ОписаниеПеременных

Перем _Зависимости; // ТаблицаЗначений
Перем _ИмяФайлаМанифеста; // Строка, Неопределено
Перем _СохранятьКопию; // Булево
Перем _РезервнаяКопия; // Строка, Неопределено
Перем _ТекстОшибкаПарсинга; // Строка
Перем _ТекстОшибкиНеудачнаяПроверка; // Строка
Перем _МанифестМодифицирован; // Булево

&ЛогDepos
Перем _Лог; // Лог

#КонецОбласти

#Область Конструктор

&Желудь
&Характер("Компанейский")
Процедура ПриСозданииОбъекта()

	_Зависимости = ПустаяТаблицаЗависимостей();
	_ТекстОшибкаПарсинга = "Ошибка парсинга packagedef";
	_ТекстОшибкиНеудачнаяПроверка = "Проверка зависимостей закончилось неудачей. %1";
	_МанифестМодифицирован = Ложь;

	СохранятьКопию(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавляет зависимости из переданной таблицы.
//
// Параметры:
//   Зависимости - ТаблицаЗначений - Таблица с данными о зависимостях:
//     * ИмяПакета - Строка - Имя пакета.
//     * ДляРазработки - Булево - Признак зависимости для разработки.
//     * МинимальнаяВерсия - Строка - Минимальная версия пакета.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция ЗависитОтПакетов(Зависимости) Экспорт

	Для Каждого СтрокаЗависимости Из Зависимости Цикл

		Если СтрокаЗависимости.ДляРазработки Тогда
			РазработкаЗависитОт(СтрокаЗависимости.ИмяПакета, СтрокаЗависимости.МинимальнаяВерсия);
		Иначе
			ЗависитОт(СтрокаЗависимости.ИмяПакета, СтрокаЗависимости.МинимальнаяВерсия);
		КонецЕсли;

	КонецЦикла;

	Возврат ЭтотОбъект;

КонецФункции

// Добавляет обычную зависимость пакета.
//
// Параметры:
//   ИмяПакета - Строка - Имя пакета.
//   МинимальнаяВерсия - Строка - Минимальная версия пакета.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция ЗависитОт(ИмяПакета, МинимальнаяВерсия) Экспорт
	ДобавитьЗависимость(ИмяПакета, МинимальнаяВерсия, Ложь);
	Возврат ЭтотОбъект;
КонецФункции

// Добавляет зависимость для разработки.
//
// Параметры:
//   ИмяПакета - Строка - Имя пакета.
//   МинимальнаяВерсия - Строка - Минимальная версия пакета.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция РазработкаЗависитОт(ИмяПакета, МинимальнаяВерсия) Экспорт
	ДобавитьЗависимость(ИмяПакета, МинимальнаяВерсия, Истина);
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает путь к файлу манифеста (packagedef) для обновления.
//
// Параметры:
//   Файл - Строка - Путь к файлу манифеста.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция ДляФайла(Файл) Экспорт
	_ИмяФайлаМанифеста = Файл;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает флаг сохранения резервной копии файла манифеста.
//
// Параметры:
//   Сохранять - Булево - Если Истина, резервная копия сохраняется после обновления (по умолчанию Истина).
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов.
Функция СохранятьКопию(Сохранять = Истина) Экспорт
	_СохранятьКопию = Сохранять;
	Возврат ЭтотОбъект;
КонецФункции

// Обновляет зависимости в файле манифеста на основе текущей коллекции зависимостей.
// Создает резервную копию, проверяет результат и восстанавливает файл при ошибке.
Процедура Обновить() Экспорт
		
	_МанифестМодифицирован = Ложь;

	ПроверитьНаличиеФайлаМанифеста();

	_Лог.Отладка("Начало обновления зависимостей в файле манифеста: %1", _ИмяФайлаМанифеста);

	Если Не ЗначениеЗаполнено(_Зависимости) Тогда
		_Лог.Предупреждение("Нет зависимостей для обновления файла манифеста: %1", _ИмяФайлаМанифеста);
		Возврат;
	КонецЕсли;

	Попытка

		ОбновитьЗависимостиВФайлеМанифеста();
		ПроверитьЗависимостиВФайлеМанифестаПослеОбновления();
		УдалитьРезервнуюКопию();

		_Лог.Отладка("Зависимости успешно обновлены в файле: %1", _ИмяФайлаМанифеста);

	Исключение

		Если _МанифестМодифицирован Тогда
			ВосстановитьИзРезервнойКопии();
		КонецЕсли;

		УдалитьРезервнуюКопию();

		ВызватьИсключение СтрШаблон(
			"Не удалось выполнить обновление зависимостей. %1", 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗависимость(ИмяПакета, МинимальнаяВерсия, ДляРазработки)
		
	СтрокаТаблицы = _Зависимости.Найти(ИмяПакета, "ИмяПакета");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = _Зависимости.Добавить();
	КонецЕсли;

	СтрокаТаблицы.ИмяПакета = ИмяПакета;
	СтрокаТаблицы.МинимальнаяВерсия = МинимальнаяВерсия;
	СтрокаТаблицы.ДляРазработки = ДляРазработки;

КонецПроцедуры

// Обновляет зависимости в файле манифеста на основе текущей коллекции.
Процедура ОбновитьЗависимостиВФайлеМанифеста()
	
	НовоеСодержимое = ПолучитьОбновленноеСодержимоеФайла();
	Если НовоеСодержимое = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СоздатьРезервнуюКопию();

	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(_ИмяФайлаМанифеста);
		ЗаписьТекста.Записать(НовоеСодержимое);
		ЗаписьТекста.Закрыть();

		_МанифестМодифицирован = Истина;
	Исключение
		ВызватьИсключение СтрШаблон(
			"Ошибка записи файла манифеста '%1': %2",
			_ИмяФайлаМанифеста,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

КонецПроцедуры

// Формирует обновленное содержимое файла манифеста с учетом текущих зависимостей.
//
// Возвращаемое значение:
//   Строка, Неопределено - Обновленное содержимое файла или Неопределено, если зависимости не найдены.
Функция ПолучитьОбновленноеСодержимоеФайла()

	СодержимоеФайла = ПрочитатьСодержимоеФайлаМанифеста();
	Совпадения = НайтиЗависимостиСодержимомФайла(СодержимоеФайла);

	Если Совпадения.Количество() = 0 Тогда
		_Лог.Предупреждение("Не найдены зависимости в файле манифеста: %1", _ИмяФайлаМанифеста);
		Возврат Неопределено;
	КонецЕсли;
	
	ИнформацияОПакетеДоИзменений = Новый ИнформацияОПакете(_ИмяФайлаМанифеста);
	Результат = Новый Массив();
	ОбработанныеПакеты = Новый Соответствие();
	ПоследнийИндекс = 0;

	Для Каждого Совпадение Из Совпадения Цикл

		ИмяПакета = Совпадение.Группы[1].Значение;

		СовпадениеВерсия = Совпадение.Группы[2];
		МинимальнаяВерсия = СовпадениеВерсия.Значение;

		ОбработанныеПакеты[ИмяПакета] = Истина;

		Если Не ЗначениеЗаполнено(МинимальнаяВерсия) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗависимостьИзИнформацииОПакете = ИнформацияОПакетеДоИзменений.Зависимость(ИмяПакета);
		Если ЗависимостьИзИнформацииОПакете = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				"%1. Найден несуществующий пакет: %2.",
				_ТекстОшибкаПарсинга,
				ИмяПакета
			);
		КонецЕсли;

		Если Не ВерсииСовпадают(ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия, МинимальнаяВерсия) Тогда
			ВызватьИсключение СтрШаблон(
				"%1. Неверная версия пакета '%2': ожидалось '%3', найдено '%4'.", 
				_ТекстОшибкаПарсинга, 
				ИмяПакета,
				ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия,
				МинимальнаяВерсия
			);
		КонецЕсли;

		Зависимость = _Зависимости.Найти(ИмяПакета, "ИмяПакета");
		Если Зависимость = Неопределено Или Не ЗначениеЗаполнено(Зависимость.МинимальнаяВерсия) Тогда
			Продолжить;
		КонецЕсли;

		ЧислоСимволов = СовпадениеВерсия.Индекс - ?(ПоследнийИндекс = 0, 0, ПоследнийИндекс - 1);

		Результат.Добавить(Сред(СодержимоеФайла, ПоследнийИндекс, ЧислоСимволов));
		Результат.Добавить(Зависимость.МинимальнаяВерсия);

		ПоследнийИндекс = СовпадениеВерсия.Индекс + СовпадениеВерсия.Длина + 1;

	КонецЦикла;

	Результат.Добавить(Сред(СодержимоеФайла, ПоследнийИндекс));

	Возврат СтрСоединить(Результат);
		
КонецФункции

// Читает содержимое файла манифеста.
//
// Возвращаемое значение:
//   Строка - Содержимое файла.
//
// Вызывает исключение:
//   Если файл не удалось прочитать.
Функция ПрочитатьСодержимоеФайлаМанифеста()
	
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста(_ИмяФайлаМанифеста);
		СодержимоеФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Возврат СодержимоеФайла;
	Исключение
		ВызватьИсключение СтрШаблон(
			"Ошибка чтения файла манифеста '%1': %2",
			_ИмяФайлаМанифеста, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

КонецФункции

Функция НайтиЗависимостиСодержимомФайла(СодержимоеФайла)

	Паттерн = "(?:ЗависитОт|РазработкаЗависитОт)\s*\(\s*""([^""]+)""\s*(?:,\s*""([^""]+)""\s*(?:,\s*""([^""]+)"")?\s*)?\)";

	РегулярноеВыражение = Новый РегулярноеВыражение(Паттерн);
	РегулярноеВыражение.Многострочный = Истина;
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;

	Возврат РегулярноеВыражение.НайтиСовпадения(СодержимоеФайла);

КонецФункции

Процедура ПроверитьНаличиеФайлаМанифеста()
		
	Если Не ЗначениеЗаполнено(_ИмяФайлаМанифеста) Тогда
		ВызватьИсключение "Не указан файл манифеста.";
	КонецЕсли;

	Если Не ФС.ФайлСуществует(_ИмяФайлаМанифеста) Тогда
		ВызватьИсключение СтрШаблон("Файл манифеста не существует: %1", _ИмяФайлаМанифеста);
	КонецЕсли;

КонецПроцедуры

// Проверяет зависимости в файле манифеста после обновления.
//
// Вызывает исключение:
//   Если файл манифеста не удалось прочитать или зависимости не соответствуют ожидаемым.
Процедура ПроверитьЗависимостиВФайлеМанифестаПослеОбновления()
	
	Попытка	
		ИнформацияОПакетеПослеИзменений = Новый ИнформацияОПакете(_ИмяФайлаМанифеста);
	Исключение
		ВызватьИсключение СтрШаблон(_ТекстОшибкиНеудачнаяПроверка, "Не удалось прочитать файл манифеста");
	КонецПопытки;

	Для Каждого Зависимость Из _Зависимости Цикл
	
		Если Не ЗначениеЗаполнено(Зависимость.МинимальнаяВерсия) Тогда
			Продолжить;
		КонецЕсли;
			
		ЗависимостьИзИнформацииОПакете = ИнформацияОПакетеПослеИзменений.Зависимость(Зависимость.ИмяПакета);
		
		// Не найдена зависимость в манифесте пакета
		Если ЗависимостьИзИнформацииОПакете = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				_ТекстОшибкиНеудачнаяПроверка,
				СтрШаблон("Не найдена зависимость '%1' в файле манифеста.", Зависимость.ИмяПакета)
			);
		КонецЕсли;

		// Неверно установилась версия пакета
		Если Не ВерсииСовпадают(ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия, Зависимость.МинимальнаяВерсия) Тогда
			ТекстОшибки = СтрШаблон(
				"Неверная версия пакета '%1': ожидалось '%2', найдено '%3'.",
				Зависимость.ИмяПакета,
				Зависимость.МинимальнаяВерсия,
				ЗависимостьИзИнформацииОПакете.МинимальнаяВерсия
			);
			ВызватьИсключение СтрШаблон(_ТекстОшибкиНеудачнаяПроверка, ТекстОшибки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СоздатьРезервнуюКопию()

	Файл = Новый Файл(_ИмяФайлаМанифеста);
	ИмяФайла = Файл.Имя + "_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd_HHmmss");
	_РезервнаяКопия = ОбъединитьПути(Файл.Путь, ИмяФайла);

	Попытка
		КопироватьФайл(_ИмяФайлаМанифеста, _РезервнаяКопия);

		Если _СохранятьКопию Тогда
			Консоль.ВывестиСтроку("");
			Консоль.ВывестиСтроку(СтрШаблон("Создана резервная копия файла: %1", _РезервнаяКопия));
		Иначе
			_Лог.Отладка("Создана резервная копия файла: %1", _РезервнаяКопия);
		КонецЕсли;
	Исключение
		ВызватьИсключение СтрШаблон(
			"Ошибка создания резервной копии '%1': %2",
			_РезервнаяКопия,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

КонецПроцедуры

Процедура ВосстановитьИзРезервнойКопии()

	Если Не ФС.ФайлСуществует(_РезервнаяКопия) Тогда
		_Лог.Ошибка("Резервная копия отсутствует");
	КонецЕсли;

	Попытка
		КопироватьФайл(_РезервнаяКопия, _ИмяФайлаМанифеста);
		_Лог.Предупреждение("Файл манифеста восстановлен из резервной копии");
	Исключение
		_Лог.Ошибка(
			"Ошибка восстановления файла манифеста из '%1': %2",
			_РезервнаяКопия,
			 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьРезервнуюКопию()
			
	Если _СохранятьКопию Тогда
		Возврат;
	КонецЕсли;

	Если Не ФС.ФайлСуществует(_РезервнаяКопия) Тогда
		Возврат;	
	КонецЕсли;

	Попытка
		УдалитьФайлы(_РезервнаяКопия);
		_Лог.Отладка("Резервная копия удалена: %1", _РезервнаяКопия);
	Исключение
		_Лог.Предупреждение(
			"Не удалось удалить резервную копию '%1': %2",
			_РезервнаяКопия,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

	_РезервнаяКопия = Неопределено;
	
КонецПроцедуры

Функция ВерсииСовпадают(Версия1, Версия2)
	Возврат Не ЗначениеЗаполнено(Версия1) И Не ЗначениеЗаполнено(Версия2) Или Версия1 = Версия2;
КонецФункции

Функция ПустаяТаблицаЗависимостей()
		
	ТипСтрока = Новый ОписаниеТипов("Строка");

	Зависимости = Новый ТаблицаЗначений();
	Зависимости.Колонки.Добавить("ИмяПакета", ТипСтрока);
	Зависимости.Колонки.Добавить("МинимальнаяВерсия", ТипСтрока);
	Зависимости.Колонки.Добавить("ДляРазработки", Новый ОписаниеТипов("Булево"));

	Возврат Зависимости;

КонецФункции

#КонецОбласти