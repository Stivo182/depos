#Использовать fs

#Область ОписаниеПеременных

Перем _Зависимости; // ТаблицаЗначений, Неопределено
Перем _РабочийКаталог; // Строка, Неопределено
Перем _КаталогиИсходников; // Массив из Строка
Перем _КаталогиВспомогательныхИсходников; // Массив из Строка
Перем _ИсключитьЗависимостиДляРазработки; // Булево
Перем _ИспользуемыеПакеты; // ТаблицаЗначений
Перем _РезультатАнализа; // РезультатАнализа

&Пластилин("СканерИсходников")
Перем _СканерИсходников; // СканерИсходников

#КонецОбласти

#Область Конструктор

&Желудь
&Характер("Компанейский")
Процедура ПриСозданииОбъекта()

	_КаталогиИсходников = Новый Массив();
	_КаталогиВспомогательныхИсходников = Новый Массив();

	_ИспользуемыеПакеты = Новый ТаблицаЗначений();
	_ИспользуемыеПакеты.Колонки.Добавить("ИмяПакета", Новый ОписаниеТипов("Строка"));
	_ИспользуемыеПакеты.Колонки.Добавить("ДляРазработки", Новый ОписаниеТипов("Булево"));
	_ИспользуемыеПакеты.Колонки.Добавить("Файлы");

	ИсключатьДляРазработки(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет анализ зависимостей и выявляет проблемы.
//
// Сканирует исходный код в указанных каталогах, ищет использования пакетов
// и сопоставляет их с декларированными зависимостями для выявления:
//   - Отсутствующих зависимостей (используется в коде, но не объявлено в манифесте)
//   - Неиспользуемых зависимостей (объявлено в манифесте, но не используется в коде)
//
// Параметры:
//   Зависимости - ЗависимостиПакета - Объект с зависимостями из манифеста пакета
//
// Возвращаемое значение:
//   РезультатАнализа - Результат анализа, содержащий найденные ошибки
Функция ПроверитьЗависимости(Зависимости) Экспорт
	
	_Зависимости = Зависимости.ВТаблицу();
	_РезультатАнализа = Новый РезультатАнализа();
	_ИспользуемыеПакеты.Очистить();

	ДобавитьИспользуемыеПакеты(
		_СканерИсходников.НайтиПакеты(ПолучитьАбсолютныеПутиКаталогов(_КаталогиИсходников)),
		Ложь
	);
	ДобавитьИспользуемыеПакеты(
		_СканерИсходников.НайтиПакеты(ПолучитьАбсолютныеПутиКаталогов(_КаталогиВспомогательныхИсходников)),
		 Истина
	);
	
	ПроверитьОтсутствующие();
	ПроверитьНеиспользуемые();
	
	Возврат _РезультатАнализа;
	
КонецФункции

// Устанавливает рабочий каталог для разрешения относительных путей.
//
// Рабочий каталог используется как базовый путь для преобразования
// относительных путей каталогов исходников в абсолютные.
//
// Параметры:
//   Каталог - Строка - Полный путь к рабочему каталогу (обычно каталог манифеста).
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция РабочийКаталог(Каталог) Экспорт
	_РабочийКаталог = Каталог;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает признак исключения зависимостей для разработки из анализа.
//
// Позволяет игнорировать зависимости, помеченные как предназначенные только для разработки,
// при проверке отсутствующих и неиспользуемых пакетов.
//
// Параметры:
//   Исключить - Булево - Признак исключения зависимостей для разработки.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция ИсключатьДляРазработки(Исключить = Истина) Экспорт
	_ИсключитьЗависимостиДляРазработки = Исключить;
	Возврат ЭтотОбъект;
КонецФункции

// Задает каталоги с основными исходниками для анализа использования пакетов.
//
// Параметры:
//   Каталоги - Массив из Строка, Строка - Массив путей к каталогам с исходниками
//                                         или строка с путями, разделенными запятыми.
//                                         Поддерживаются абсолютные и относительные пути.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция КаталогиИсходников(Каталоги) Экспорт

	_КаталогиИсходников.Очистить();
	ПрименитьКаталоги(Каталоги, _КаталогиИсходников);

	Возврат ЭтотОбъект;

КонецФункции

// Задает каталоги со вспомогательными исходниками для анализа использования пакетов.
//
// Определяет каталоги со вспомогательным кодом (тесты, примеры, инструменты сборки),
// в которых будет выполняться поиск использования пакетов. Пакеты, найденные
// в этих каталогах, помечаются как используемые для разработки.
//
// Параметры:
//   Каталоги - Массив из Строка, Строка - Массив путей к каталогам со вспомогательными исходниками
//                                         или строка с путями, разделенными запятыми.
//                                         Поддерживаются абсолютные и относительные пути.
//
// Возвращаемое значение:
//   ЭтотОбъект - Для поддержки цепочки вызовов
Функция КаталогиДляРазработки(Каталоги) Экспорт

	_КаталогиВспомогательныхИсходников.Очистить();
	ПрименитьКаталоги(Каталоги, _КаталогиВспомогательныхИсходников);

	Возврат ЭтотОбъект;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрименитьКаталоги(Источник, Приемник)
		
	Приемник.Очистить();

	ИсточникМассив = Источник;
	Если ТипЗнч(ИсточникМассив) = Тип("Строка") Тогда
		ИсточникМассив = СтрРазделить(ИсточникМассив, ",", Ложь);
	КонецЕсли;

	Для Каждого Каталог Из ИсточникМассив Цикл
		Приемник.Добавить(Каталог);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьИспользуемыеПакеты(Пакеты, ДляРазработки)
	
	Для Каждого Пакет Из Пакеты Цикл

		Отбор = Новый Структура("ИмяПакета, ДляРазработки", Пакет.ИмяПакета, ДляРазработки);
		НайденныеСтроки = _ИспользуемыеПакеты.НайтиСтроки(Отбор);

		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТаблицы = _ИспользуемыеПакеты.Добавить();
			СтрокаТаблицы.ИмяПакета = Пакет.ИмяПакета;
			СтрокаТаблицы.ДляРазработки = ДляРазработки;
			СтрокаТаблицы.Файлы = Новый Массив();
		Иначе
			СтрокаТаблицы = НайденныеСтроки[0];
		КонецЕсли;

		СтрокаТаблицы.Файлы.Добавить(Пакет.Файл);

	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьОтсутствующие()
	
	Для Каждого ИспользуемыйПакет Из _ИспользуемыеПакеты Цикл

		Если _ИсключитьЗависимостиДляРазработки И ИспользуемыйПакет.ДляРазработки Тогда
			Продолжить;
		КонецЕсли;

		Отбор = Новый Структура();
		Отбор.Вставить("ИмяПакета", ИспользуемыйПакет.ИмяПакета); 
		
		Если Не ИспользуемыйПакет.ДляРазработки Тогда
			Отбор.Вставить("ДляРазработки", ИспользуемыйПакет.ДляРазработки); 
		КонецЕсли;
			
		Если _Зависимости.НайтиСтроки(Отбор).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаРезультата = _РезультатАнализа.ОтсутствующиеПакеты.Добавить();
		СтрокаРезультата.ИмяПакета = ИспользуемыйПакет.ИмяПакета;
		СтрокаРезультата.ДляРазработки = ИспользуемыйПакет.ДляРазработки;
		СтрокаРезультата.Файлы = ИспользуемыйПакет.Файлы;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьНеиспользуемые()
	
	Для Каждого Зависимость Из _Зависимости Цикл

		Если _ИсключитьЗависимостиДляРазработки И Зависимость.ДляРазработки Тогда
			Продолжить;
		КонецЕсли;

		Отбор = Новый Структура("ИмяПакета, ДляРазработки", Зависимость.ИмяПакета, Зависимость.ДляРазработки);
		
		Если _ИспользуемыеПакеты.НайтиСтроки(Отбор).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаРезультата = _РезультатАнализа.НеиспользуемыеПакеты.Добавить();
		СтрокаРезультата.ИмяПакета = Зависимость.ИмяПакета;
		СтрокаРезультата.ДляРазработки = Зависимость.ДляРазработки;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьАбсолютныеПутиКаталогов(Каталоги)

	Если Не ЗначениеЗаполнено(_РабочийКаталог) Тогда
		Возврат Каталоги;
	КонецЕсли;

	Результат = Новый Массив();
	Для Каждого Каталог Из Каталоги Цикл

		Каталог = СокрЛП(Каталог);

		Если ЭтоОтносительныйПуть(Каталог) Тогда
			Результат.Добавить(ФС.ПолныйПуть(ОбъединитьПути(_РабочийКаталог, Каталог)));
		Иначе
			Результат.Добавить(Каталог);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ЭтоОтносительныйПуть(Путь)

	СистемнаяИнформация = Новый СистемнаяИнформация();

	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат Не (СтрНачинаетсяС(Путь, "\\") Или СтрНайти(Путь, ":") > 0);
	Иначе
		Возврат Не СтрНачинаетсяС(Путь, "/");
	КонецЕсли;

КонецФункции

#КонецОбласти
