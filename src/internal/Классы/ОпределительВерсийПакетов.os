#Использовать semver

#Область ОписаниеПеременных

Перем _Пакеты; // Соответствие
Перем _ТипВерсии; // Строка, Неопределено - см. ТипыВерсий
Перем _ПустаяВерсия; // Строка - Значение пустой версии ("0.0.0")

&Пластилин("КлиентРеестраПакетов")
Перем _КлиентРеестраПакетов; // КлиентРеестраПакетов

#КонецОбласти

#Область Конструктор

&Желудь
&Характер("Компанейский")
Процедура ПриСозданииОбъекта()
	_Пакеты = Новый Соответствие();
	_ПустаяВерсия = "0.0.0";
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Находит целевые версии для указанных пакетов на основе их минимальных версий и типа версии.
//
// Параметры:
//   Пакеты - Строка - Список имен пакетов через запятую или пробел, опционально с минимальными версиями
//                     в формате "имя@версия" (например, "autumn@4.3.3, asserts").
//          - Массив из Строка - Список имен пакетов, возможно с минимальными версиями в формате "имя@версия".
//          - ТаблицаЗначений - Таблица с данными о пакетах:
//            * ИмяПакета - Строка - Имя пакета.
//            * МинимальнаяВерсия - Строка - Минимальная версия пакета.
//   ТипВерсии - Строка - Тип целевой версии (см. ТипыВерсий).
//                        Если не указан или пустой, используется значение "Последняя".
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ - Строка - Имя пакета
//     * Значение - Строка - Целевая версия
Функция НайтиВерсии(Пакеты, ТипВерсии = Неопределено) Экспорт

	ДобавитьПакеты(Пакеты);
	УстановитьТипВерсии(ТипВерсии);

	Результат = Новый Соответствие();

	Для Каждого Строка Из _Пакеты Цикл

		ИмяПакета = Строка.Ключ;
		МинимальнаяВерсия = Строка.Значение;

		ЦелеваяВерсия = ОпределитьЦелевуюВерсию(ИмяПакета, МинимальнаяВерсия);

		Если ЗначениеЗаполнено(ЦелеваяВерсия) Тогда
			Результат.Вставить(ИмяПакета, ЦелеваяВерсия);
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТипВерсии(ТипВерсии)
	_ТипВерсии = ?(ЗначениеЗаполнено(ТипВерсии), ТипВерсии, ТипыВерсий.Последняя);
КонецПроцедуры

Процедура ДобавитьПакеты(Пакеты)
		
	_Пакеты.Очистить();
	Тип = ТипЗнч(Пакеты) ;
	
	Если Тип = Тип("Строка") Тогда
		ДобавитьПакеты(СтрРазделить(Пакеты, ", ", Ложь));
	ИначеЕсли Тип = Тип("Массив") Тогда
		ДобавитьПакетыИзМассива(Пакеты);
	ИначеЕсли Тип = Тип("ТаблицаЗначений") Тогда
		ДобавитьПакетыИзТаблицы(Пакеты);
	Иначе
		ВызватьИсключение СтрШаблон(
			"Неподдерживаемый тип параметра Пакеты: %1. Ожидался Строка, Массив или ТаблицаЗначений.", 
			Тип
		);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПакетыИзТаблицы(Пакеты)

	Для Каждого Пакет Из Пакеты Цикл
		ДобавитьПакет(Пакет.ИмяПакета, Пакет.МинимальнаяВерсия);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПакетыИзМассива(Пакеты)

	Для Каждого Пакет Из Пакеты Цикл
		ДобавитьПакет(Пакет);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПакет(ИмяПакета, МинимальнаяВерсия = "")

	Части = СтрРазделить(ИмяПакета, "@");
	Если Части.Количество() = 2 Тогда
		_Пакеты.Вставить(Части[0], Части[1]);
	Иначе
		_Пакеты.Вставить(ИмяПакета, МинимальнаяВерсия);
	КонецЕсли;

КонецПроцедуры

Функция ОпределитьЦелевуюВерсию(ИмяПакета, Знач МинимальнаяВерсия)
	
	Если Не ЗначениеЗаполнено(МинимальнаяВерсия) Тогда
		МинимальнаяВерсия = _ПустаяВерсия;
	КонецЕсли;
		
	Попытка
		ВерсииПакета = _КлиентРеестраПакетов.ПолучитьВерсии(ИмяПакета);
	Исключение
		ВызватьИсключение СтрШаблон(
			"Возникла ошибка при получении версий для пакета '%1': %2",
			ИмяПакета, 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;

	Если ВерсииПакета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОбъектыВерсий = Новый Массив();
	ИсходныеВерсии = Новый Соответствие();
	Для Каждого ВерсияСтрокой Из ВерсииПакета Цикл
		ВерсияОбъект = Новый Версия(ВерсияСтрокой);
		Если Не ВерсияОбъект.Ошибка() Тогда
			ОбъектыВерсий.Добавить(ВерсияОбъект);
			ИсходныеВерсии.Вставить(ВерсияОбъект.ВСтроку(), ВерсияСтрокой);
		КонецЕсли;
	КонецЦикла;

	Если _ТипВерсии = ТипыВерсий.Последняя 
		Или Не ЗначениеЗаполнено(_ТипВерсии)
		Или МинимальнаяВерсия = _ПустаяВерсия Тогда
		Версия = МаксимальнаяВерсия(ОбъектыВерсий, МинимальнаяВерсия);
	ИначеЕсли _ТипВерсии = ТипыВерсий.Минорная Тогда
		Версия = МаксимальнаяМинорнаяВерсия(ОбъектыВерсий, МинимальнаяВерсия);
	ИначеЕсли _ТипВерсии = ТипыВерсий.Патч Тогда
		Версия = МаксимальнаяПатчВерсия(ОбъектыВерсий, МинимальнаяВерсия);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(Версия) И Не Версия = _ПустаяВерсия Тогда
		Возврат ИсходныеВерсии[Версия];
	КонецЕсли;

КонецФункции

Функция МаксимальнаяВерсия(МассивВерсий, МинимальнаяВерсия)
			
	Возврат Версии.Сравнение(">=" + МинимальнаяВерсия)
		.ПроверяемыеВерсии(МассивВерсий)
		.Максимальная()
		.ВСтроку();

КонецФункции

Функция МаксимальнаяМинорнаяВерсия(МассивВерсий, МинимальнаяВерсия)

	МинимальнаяВерсияОбъект = Версии.ВерсияИзСтроки(МинимальнаяВерсия);

	МаксимальнаяВерсияОбъект = Новый Версия(_ПустаяВерсия);
	МаксимальнаяВерсияОбъект.Основная = МинимальнаяВерсияОбъект.Основная + 1;

	Возврат Версии.Сравнение(">=" + МинимальнаяВерсияОбъект.ВСтроку())
		.ДобавитьДиапазон("<" + МаксимальнаяВерсияОбъект.ВСтроку())
		.ПроверяемыеВерсии(МассивВерсий)
		.Максимальная()
		.ВСтроку();

КонецФункции

Функция МаксимальнаяПатчВерсия(МассивВерсий, МинимальнаяВерсия)
			
	МинимальнаяВерсияОбъект = Версии.ВерсияИзСтроки(МинимальнаяВерсия);

	МаксимальнаяВерсияОбъект = Новый Версия(_ПустаяВерсия);
	МаксимальнаяВерсияОбъект.Основная = МинимальнаяВерсияОбъект.Основная;
	МаксимальнаяВерсияОбъект.Второстепенная  = МинимальнаяВерсияОбъект.Второстепенная + 1;

	Возврат Версии.Сравнение(">=" + МинимальнаяВерсия)
		.ДобавитьДиапазон("<" + МаксимальнаяВерсияОбъект.ВСтроку())
		.ПроверяемыеВерсии(МассивВерсий)
		.Максимальная()
		.ВСтроку();

КонецФункции

#КонецОбласти